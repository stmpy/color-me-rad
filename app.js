// Generated by CoffeeScript 1.8.0
var App, CategoryLayout, ColumnLayout, Controller, Event, EventView, Events, Router, Tab, TabView, Tabs, TabsView, ThirdColumnView;

App = new Marionette.Application({
  regions: {
    application: '#main',
    tabs: 'dl.tabs',
    content: 'div.content'
  }
});


/* */

Event = Backbone.Model.extend({});

Events = Backbone.Collection.extend({
  model: Event
});

Tab = Backbone.Model.extend({});

Tabs = Backbone.Collection.extend({
  model: Tab

  /* */
});

TabView = Marionette.ItemView.extend({
  tagName: 'dd',
  className: function() {
    if (this.model.get('href') === Backbone.history.fragment) {
      return 'active';
    }
    return '';
  },
  template: _.template('<a href="#/<%= href %>"><%= name %></a>')
});

TabsView = Marionette.CollectionView.extend({
  tagName: 'dl',
  className: 'right',
  childView: TabView,
  events: {
    'click dd': 'changeTab'
  },
  changeTab: function(ev, el) {
    return this.$(ev.target).parent().addClass('active').siblings().removeClass('active');
  }
});

EventView = Marionette.ItemView.extend({
  className: 'eventbrite-event',
  template: _.template('<strong style="text-transform:uppercase;"><%= venue.address.city %>, <%= venue.address.region %></strong><br/> <%= moment(start.local,moment.ISO_8601).format("MM-DD-YY") %> | <a href="#">Sign Up</a>')
});

ThirdColumnView = Marionette.CollectionView.extend({
  className: 'medium-4 small-6 columns',
  childView: EventView
});

ColumnLayout = Marionette.LayoutView.extend({
  className: 'row',
  regions: {
    column1: '#column1',
    column2: '#column2',
    column3: '#column3'
  },
  template: _.template(''),
  _mapping: {
    '3': ThirdColumnView
  },
  onRender: function() {
    var columnView, self;
    self = this;
    columnView = this._mapping[this.getOption('column_count')];
    return _.each(this.getOption('columns'), function(group, i) {
      return self.$el.append((new columnView({
        collection: new Events(group)
      })).render().el);
    });
  }
});

CategoryLayout = Marionette.LayoutView.extend({
  template: _.template(""),
  onRender: function() {
    var self;
    self = this;
    return _.each(this.getOption('categories'), function(group, category) {
      return self.$el.prepend("<h4>" + category + "</h4>", (new ColumnLayout({
        column_count: 3,
        columns: _.groupBy(group, function(event, i) {
          return parseInt(i / (group.length / 3));
        })
      })).render().el);

      /* */
    });
  }
});

Controller = Marionette.Controller.extend({
  upcoming: function() {
    var grouped_by_date;
    grouped_by_date = App.events['by_date'].groupBy(function(ev, i) {
      return moment(ev.get('start').local).format("MMMM YYYY");
    });
    return App.content.show(new CategoryLayout({
      categories: grouped_by_date
    }));
  },
  alphabetical: function() {
    var grouped_by_city;
    grouped_by_city = App.events['by_date'].groupBy(function(ev, i) {
      return ev.get('venue').address.city.substr(0, 1);
    });
    return App.content.show(new CategoryLayout({
      categories: grouped_by_city
    }));
  },
  nearby: function() {
    return this._show('by_proximity');
  },
  _show: function(list) {
    return App.content.show(new ColumnLayout({
      column_count: 3,
      columns: App.events[list].groupBy(function(event, i) {
        return parseInt(i / (App.events[list].length / 3));
      })
    }));
  }
});

Router = Marionette.AppRouter.extend({
  appRoutes: {
    'upcoming(/)': 'upcoming',
    'alphabetical(/)': 'alphabetical',
    'nearby(/)': 'nearby'
  }
});

App.addInitializer(function(events) {
  _.times(4, function() {
    return events = _.each(events, function(event) {
      return events.push(event);
    });
  });
  this.events = {
    by_date: new Events(_.sortBy(events, function(ev) {
      return ev.start.local;
    })),
    by_city: new Events(_.sortBy(events, function(ev) {
      return -ev.venue.address.city.substr(0, 1);
    })),
    by_proxity: new Events(_.sortBy(events, 'venue.address.latitude'))
  };
  this.router = new Router({
    controller: new Controller
  });
  Backbone.history.start();
  if (Backbone.history.fragment === "") {
    this.router.navigate("#/upcoming");
  }
  return this.tabs.show(new TabsView({
    collection: new Tabs([
      {
        href: 'upcoming',
        name: 'Upcoming'
      }, {
        href: 'alphabetical',
        name: 'Alphabetical'
      }, {
        href: 'nearby',
        name: 'Nearby'
      }
    ])
  }));
});
